import logging
import aiohttp
from io import BytesIO

from aiogram import Router, F, types
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext

from keyboards.inline import get_view_logs_keyboard, get_main_menu_keyboard
from states.user_states import UserState
from handlers.auth import AdminFilter
from utils import api_client
from config.settings import ApiConfig

view_logs_router = Router()

view_logs_router.message.filter(AdminFilter(), StateFilter(UserState.authorized))
view_logs_router.callback_query.filter(AdminFilter(), StateFilter(UserState.authorized))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤" –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é (callback_data="view_logs")
@view_logs_router.callback_query(F.data == "view_logs")
async def show_view_logs_menu(callback_query: types.CallbackQuery):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–¥–º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –ª–æ–≥–∞."""
    user_id = callback_query.from_user.id
    logging.info(f"Admin {user_id} accessed view logs menu.")
    try:
        await callback_query.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–≥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
            reply_markup=get_view_logs_keyboard()
        )
    except Exception as e:
        logging.error(f"Error editing message for view logs menu (user {user_id}): {e}")
        await callback_query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é.", show_alert=True)
        return
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ –º–µ–Ω—é –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ (callback_data="main_menu")
@view_logs_router.callback_query(F.data == "main_menu")
async def back_to_main_menu_from_logs(callback_query: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    user_id = callback_query.from_user.id
    logging.info(f"Admin {user_id} returned to main menu from logs.")
    try:
        await callback_query.message.edit_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=get_main_menu_keyboard() 
        )
    except Exception as e:
        logging.error(f"Error editing message for main menu from logs (user {user_id}): {e}")
        await callback_query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", show_alert=True)
        return
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ª–æ–≥–∞
@view_logs_router.callback_query(F.data.startswith("view_log:"))
async def handle_view_log(
    callback_query: types.CallbackQuery,
    http_session: aiohttp.ClientSession,
    api_settings: ApiConfig
):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ª–æ–≥ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞.
    –î–ª–∏–Ω–Ω—ã–µ –ª–æ–≥–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª–æ–º.
    """
    try:
        parser_name = callback_query.data.split(":")[-1]
        if not parser_name:
            raise IndexError("Parser name is empty")
    except IndexError:
        logging.error(f"Invalid callback_data format received: {callback_query.data}")
        await callback_query.answer("–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏.", show_alert=True)
        return

    user_id = callback_query.from_user.id
    logging.info(f"Admin {user_id} requested log for '{parser_name}'.")

    # 1. –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–∞—á–∞–ª–µ –∑–∞–ø—Ä–æ—Å–∞
    await callback_query.answer(f"–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –ª–æ–≥ '{parser_name}'...")
    try:
        await callback_query.message.edit_text(
            f"‚è≥ –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –ª–æ–≥ –¥–ª—è '{parser_name}'...",
            reply_markup=None
        )
    except Exception as e:
        logging.warning(f"Could not edit message before requesting log '{parser_name}': {e}")

    # 2. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ª–æ–≥ —á–µ—Ä–µ–∑ API –∫–ª–∏–µ–Ω—Ç
    success, log_content = await api_client.get_parser_logs(http_session, api_settings, parser_name)

    # 3. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    final_text = ""
    document_to_send = None

    if success:
        logging.info(f"Log for '{parser_name}' received successfully for user {user_id}.")
        if log_content:
            max_length = 4000
            if len(log_content) > max_length:
                logging.warning(f"Log for '{parser_name}' is too long ({len(log_content)} chars). Preparing file.")
                try:

                    log_file = BytesIO(log_content.encode('utf-8'))
                    document_to_send = types.BufferedInputFile(log_file.getvalue(), filename=f"{parser_name}_log.txt")
                    final_text = f"üìÑ –õ–æ–≥ –¥–ª—è '{parser_name}' —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª–æ–º."
                except Exception as e:
                    logging.exception(f"Error preparing log file for '{parser_name}'")
                    final_text = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Ñ–∞–π–ª–∞ –ª–æ–≥–∞ –¥–ª—è '{parser_name}'. –ü–æ–∫–∞–∑–∞–Ω–∞ —á–∞—Å—Ç—å:\n\n```\n{log_content[:max_length]}...\n```"
            else:
                 final_text = f"üìÑ –õ–æ–≥ –¥–ª—è '{parser_name}':\n\n```\n{log_content}\n```"
        else:
            # –ï—Å–ª–∏ API –≤–µ—Ä–Ω—É–ª–æ —É—Å–ø–µ—Ö, –Ω–æ –ª–æ–≥ –ø—É—Å—Ç
            final_text = f"‚ÑπÔ∏è –õ–æ–≥ –¥–ª—è '{parser_name}' –ø—É—Å—Ç."
    else:
        logging.error(f"Failed to retrieve log for '{parser_name}' for user {user_id}. Reason: {log_content}")
        final_text = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥ –¥–ª—è '{parser_name}'.\n\n{log_content}"

    # 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        if document_to_send:
            await callback_query.message.delete()
            await callback_query.message.answer_document(
                document=document_to_send,
                caption=final_text,
                reply_markup=get_view_logs_keyboard()
            )
        else:
            await callback_query.message.edit_text(
                final_text,
                reply_markup=get_view_logs_keyboard(),
                parse_mode="Markdown"
            )
    except Exception as e:
        logging.error(f"Failed to send/edit message with log result for '{parser_name}' (user {user_id}): {e}")
        try:
             await callback_query.message.answer(
                 f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è '{parser_name}':\n{log_content if success else '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–∞.'}",
                 reply_markup=get_view_logs_keyboard()
                 )
        except Exception as final_e:
            logging.error(f"Failed even to send plain text result for log '{parser_name}': {final_e}")
            await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ª–æ–≥–∞.", show_alert=True)
