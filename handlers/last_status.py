import logging
from datetime import datetime

from aiogram import Router, F, types
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext

from keyboards.inline import get_main_menu_keyboard
from states.user_states import UserState
from handlers.auth import AdminFilter
from utils.status_tracker import get_last_status

logger = logging.getLogger(__name__)
last_status_router = Router()
last_status_router.message.filter(AdminFilter(), StateFilter("*"))
last_status_router.callback_query.filter(AdminFilter(), StateFilter("*"))

@last_status_router.callback_query(F.data == "last_status", StateFilter(UserState.authorized))
async def show_last_status(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–°—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞'.
    –ß–∏—Ç–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∏–∑ —Ñ–∞–π–ª–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    user_id = callback_query.from_user.id
    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞.")
    await callback_query.answer("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞...") # –ö—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É

    status_data = get_last_status()
    message_text = ""

    if status_data is None:
        message_text = "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∑–∞–ø—É—Å–∫–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."
        logger.warning(f"–°—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç {user_id}.")
    else:
        try:
            process_name = status_data.get("process_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å")
            timestamp_str = status_data.get("timestamp_utc", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è")
            success = status_data.get("success", False)
            result_msg = status_data.get("message", "–ù–µ—Ç –¥–µ—Ç–∞–ª–µ–π.")

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            try:
                dt_utc = datetime.fromisoformat(timestamp_str.replace('Z', '+00:00'))
                formatted_time = dt_utc.strftime('%Y-%m-%d %H:%M:%S %Z')
            except Exception:
                formatted_time = timestamp_str

            status_text = "‚úÖ –£—Å–ø–µ—à–Ω–æ" if success else "‚ùå –û—à–∏–±–∫–∞"

            max_msg_len = 3500
            if len(result_msg) > max_msg_len:
                 result_msg_short = result_msg[:max_msg_len] + "..."
            else:
                 result_msg_short = result_msg

            message_text = (
                f"üìä **–°—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞:**\n\n"
                f"üîπ **–ü—Ä–æ—Ü–µ—Å—Å:** {process_name}\n"
                f"üïí **–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (UTC):** {formatted_time}\n"
                f"üö¶ **–°—Ç–∞—Ç—É—Å:** {status_text}\n\n"
                f"üìù **–†–µ–∑—É–ª—å—Ç–∞—Ç:**\n```\n{result_msg_short}\n```"
            )
            logger.info(f"–û—Ç–æ–±—Ä–∞–∂–µ–Ω —Å—Ç–∞—Ç—É—Å –¥–ª—è {user_id}: –ü—Ä–æ—Ü–µ—Å—Å={process_name}, –£—Å–ø–µ—Ö={success}")

        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è {user_id}")
            message_text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç–∞—Ç—É—Å–µ."

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    try:
        await callback_query.message.edit_text(
            message_text,
            reply_markup=get_main_menu_keyboard(),
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –¥–ª—è {user_id}: {e}")
        try:
            await callback_query.message.answer(
                 message_text,
                 reply_markup=get_main_menu_keyboard(),
                 parse_mode="Markdown"
                 )
        except Exception as e2:
             logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –¥–ª—è {user_id}: {e2}")
             await callback_query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å—Ç–∞—Ç—É—Å.", show_alert=True)